<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>scala-模式匹配</title>
      <link href="/posts/b9a6.html"/>
      <url>/posts/b9a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-模式匹配"><a href="#1-模式匹配" class="headerlink" title="1.模式匹配"></a>1.模式匹配</h2><h3 id="1-1简单模式匹配"><a href="#1-1简单模式匹配" class="headerlink" title="1.1简单模式匹配"></a>1.1简单模式匹配</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单模式匹配</span></span><br><span class="line">print(<span class="string">&quot;请输入一个字符串：&quot;</span>)</span><br><span class="line"><span class="comment">//    val UserStdIn: Any = StdIn.readLine()</span></span><br><span class="line"><span class="keyword">val</span> <span class="type">UserStdIn</span>: <span class="type">Any</span> = <span class="string">&quot;hadoop&quot;</span></span><br><span class="line"><span class="type">UserStdIn</span> <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hadoop&quot;</span> =&gt; println(<span class="string">&quot;你真是个天才&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;flume&quot;</span> =&gt; println(<span class="string">&quot;你也是个天才&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;flink&quot;</span> =&gt; println(<span class="string">&quot;人才&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;默认项&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2匹配类型"><a href="#1-2匹配类型" class="headerlink" title="1.2匹配类型"></a>1.2匹配类型</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配类型</span></span><br><span class="line"><span class="type">UserStdIn</span> <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">String</span> =&gt; println(<span class="string">&quot;这是一个字符串&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">Int</span> =&gt; println(<span class="string">&quot;这是一个整形&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">Char</span> =&gt; println(<span class="string">&quot;这是一个字符&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;默认项&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3守卫"><a href="#1-3守卫" class="headerlink" title="1.3守卫"></a>1.3守卫</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 守卫 所谓的守卫指的是在case语句中添加if条件判断，这样可以让我们的代码更简洁，更优雅</span></span><br><span class="line"><span class="comment">//    val NumStdin = StdIn.readInt()</span></span><br><span class="line"><span class="keyword">val</span> <span class="type">NumStdin</span> = <span class="number">22</span></span><br><span class="line"><span class="type">NumStdin</span> <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> x <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) =&gt; println(<span class="string">&quot;是个偶数&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> x <span class="keyword">if</span> (x == <span class="number">0</span>) =&gt; println(<span class="string">&quot;是零&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;是别的数字&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4匹配样例类"><a href="#1-4匹配样例类" class="headerlink" title="1.4匹配样例类"></a>1.4匹配样例类</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配样例类  可以快速拿到传入类的参数</span></span><br><span class="line"><span class="keyword">val</span> c: <span class="type">Any</span> = <span class="type">Customer</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="keyword">val</span> o: <span class="type">Any</span> = <span class="type">Order</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Customer</span>(name, age) =&gt; println(<span class="string">s&quot;Customer类型的对象, name=<span class="subst">$&#123;name&#125;</span>, age=<span class="subst">$&#123;age&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Order</span>(id) =&gt; println(<span class="string">s&quot;Order类型的对象, id=<span class="subst">$&#123;id&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;未匹配&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5匹配数组、元祖、集合、列表、映射、集"><a href="#1-5匹配数组、元祖、集合、列表、映射、集" class="headerlink" title="1.5匹配数组、元祖、集合、列表、映射、集"></a>1.5匹配数组、元祖、集合、列表、映射、集</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配数组、元祖、集合、列表、映射、集</span></span><br><span class="line"><span class="keyword">val</span> arr1 = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>)</span><br><span class="line"><span class="keyword">val</span> arr2 = <span class="type">Array</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">val</span> arr3 = <span class="type">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">arr1 <span class="keyword">match</span> &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="type">Array</span>(<span class="number">1</span>, x, y) =&gt; println(<span class="string">s&quot;匹配到数组：长度为3,首元素为1，剩下两个元素无所谓，这里剩下的两个元素分别是：<span class="subst">$&#123;x&#125;</span>, <span class="subst">$&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">     <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; println(<span class="string">&quot;匹配到数组：长度为1，且只有一个元素0&quot;</span>)</span><br><span class="line">     <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>, _*) =&gt; println(<span class="string">&quot;匹配到数组：以元素0开头，后边的元素无所谓&quot;</span>)</span><br><span class="line">     <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;未匹配&quot;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="1-6匹配列表"><a href="#1-6匹配列表" class="headerlink" title="1.6匹配列表"></a>1.6匹配列表</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配列表</span></span><br><span class="line"><span class="keyword">val</span> list1 = <span class="type">List</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">val</span> list2 = (<span class="number">0</span> to <span class="number">100</span>).toList</span><br><span class="line"><span class="keyword">val</span> list3 = <span class="type">List</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">list1 <span class="keyword">match</span> &#123;</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span> :: <span class="type">Nil</span> =&gt; println(<span class="string">&quot;只包含一个0&quot;</span>)</span><br><span class="line">   <span class="keyword">case</span> <span class="number">0</span> :: tail =&gt; println(<span class="string">&quot;以0开头的列表，数量不固定&quot;</span>)</span><br><span class="line">   <span class="keyword">case</span> x :: y :: <span class="type">Nil</span> =&gt; println(<span class="string">s&quot;只有两个数字的列表，数字分别是: <span class="subst">$&#123;x&#125;</span>, <span class="subst">$&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;不匹配&quot;</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1-7匹配元组"><a href="#1-7匹配元组" class="headerlink" title="1.7匹配元组"></a>1.7匹配元组</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配元祖</span></span><br><span class="line"><span class="keyword">val</span> tuple1 = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">val</span> tuple2 = (<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> tuple3 = (<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">tuple1 <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">1</span>, x, y) =&gt; println(<span class="string">s&quot;以1开头的元祖，一共三个元素，另外两个元素为<span class="subst">$&#123;x&#125;</span>, <span class="subst">$&#123;y&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> (x, y, <span class="number">5</span>) =&gt; println(<span class="string">&quot;一共三个元素，最后一个元素为5的元祖&quot;</span>)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;不匹配&quot;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="1-8变量生命中的模式匹配"><a href="#1-8变量生命中的模式匹配" class="headerlink" title="1.8变量生命中的模式匹配"></a>1.8变量生命中的模式匹配</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量声明中的模式匹配</span></span><br><span class="line"><span class="keyword">val</span> arr4 = (<span class="number">0</span> to <span class="number">10</span>).toArray</span><br><span class="line"><span class="comment">// 获得第二个，第三个，第四个元素</span></span><br><span class="line"><span class="keyword">val</span> <span class="type">Array</span>(_, x, y, z, _*) = arr4</span><br><span class="line">println(x, y, z)</span><br><span class="line"><span class="comment">// 获得第一个，第二个元素</span></span><br><span class="line"><span class="keyword">val</span> list5 = (<span class="number">0</span> to <span class="number">10</span>).toList</span><br><span class="line"><span class="keyword">val</span> <span class="type">List</span>(a, b, _*) = list5</span><br><span class="line">println(a, b)</span><br></pre></td></tr></table></figure><h3 id="1-9匹配for表达式"><a href="#1-9匹配for表达式" class="headerlink" title="1.9匹配for表达式"></a>1.9匹配for表达式</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配for表达式</span></span><br><span class="line"><span class="keyword">val</span> map1 = <span class="type">Map</span>(<span class="string">&quot;张三&quot;</span> -&gt; <span class="number">13</span>, <span class="string">&quot;李四&quot;</span> -&gt; <span class="number">34</span>, <span class="string">&quot;王五&quot;</span> -&gt; <span class="number">34</span>, <span class="string">&quot;赵柳&quot;</span> -&gt; <span class="number">44</span>)</span><br><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="keyword">for</span> ((k, v) &lt;- map1 <span class="keyword">if</span> (v == <span class="number">34</span>)) println(k, v)</span><br><span class="line"><span class="comment">// 方式2</span></span><br><span class="line"><span class="keyword">for</span> ((k, <span class="number">34</span>) &lt;- map1) println(k, <span class="number">34</span>)</span><br></pre></td></tr></table></figure><h3 id="2-Option类型"><a href="#2-Option类型" class="headerlink" title="2.Option类型"></a>2.Option类型</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divide</span></span>(a: <span class="type">Int</span>, b: <span class="type">Int</span>)= &#123;</span><br><span class="line">  <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="type">None</span></span><br><span class="line">  <span class="keyword">else</span> <span class="type">Some</span>(a / b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思路一</span></span><br><span class="line"><span class="keyword">val</span> result1 = divide(<span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">println(result1)</span><br><span class="line"><span class="comment">// 思路二</span></span><br><span class="line">result1 <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Some</span>(x) =&gt; println(x)</span><br><span class="line">  <span class="keyword">case</span> <span class="type">None</span> =&gt; println(<span class="string">&quot;不能为0&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 思路三</span></span><br><span class="line">println(result1.getOrElse(<span class="string">&quot;不能为0&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-偏函数"><a href="#3-偏函数" class="headerlink" title="3.偏函数"></a>3.偏函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 偏函数</span></span><br><span class="line"><span class="keyword">val</span> pf: <span class="type">PartialFunction</span>[<span class="type">Int</span>, <span class="type">String</span>] = &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;一&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">2</span> =&gt; <span class="string">&quot;二&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">3</span> =&gt; <span class="string">&quot;三&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">4</span> =&gt; <span class="string">&quot;四&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt; <span class="string">&quot;未匹配&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(pf(<span class="number">1</span>))</span><br><span class="line">println(pf(<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="3-1结合map函数使用偏函数"><a href="#3-1结合map函数使用偏函数" class="headerlink" title="3.1结合map函数使用偏函数"></a>3.1结合map函数使用偏函数</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合map函数使用偏函数</span></span><br><span class="line"><span class="keyword">val</span> list11 = (<span class="number">1</span> to <span class="number">10</span>).toList</span><br><span class="line"><span class="comment">//核心： 偏函数 结合 集合的函数式编程来使用</span></span><br><span class="line"><span class="keyword">val</span> list12 = list11.map &#123;</span><br><span class="line">  <span class="keyword">case</span> x <span class="keyword">if</span> x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= <span class="number">3</span> =&gt; <span class="string">&quot;[1-3]&quot;</span></span><br><span class="line">  <span class="keyword">case</span> x <span class="keyword">if</span> x &gt;= <span class="number">4</span> &amp;&amp; x &lt;= <span class="number">8</span> =&gt; <span class="string">&quot;[4-8]&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt; <span class="string">&quot;(8-*]&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(list12)</span><br></pre></td></tr></table></figure><h3 id="3-2正则表达式"><a href="#3-2正则表达式" class="headerlink" title="3.2正则表达式"></a>3.2正则表达式</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line"><span class="keyword">val</span> email = <span class="string">&quot;hkjcpdd123@163.com&quot;</span></span><br><span class="line"><span class="keyword">val</span> regex = <span class="string">&quot;&quot;&quot;.+@.+\..+&quot;&quot;&quot;</span>.r</span><br><span class="line"><span class="keyword">if</span> (regex.findAllMatchIn(email).nonEmpty) &#123; <span class="comment">// 那个nonEmpty就是i.size != 0</span></span><br><span class="line">  <span class="comment">// 能走到这里， 说明是合法邮箱</span></span><br><span class="line">  println(<span class="string">s&quot;<span class="subst">$&#123;email&#125;</span>是合法的邮箱&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 走到这里，说明是非法的邮箱</span></span><br><span class="line">  println(<span class="string">s&quot;<span class="subst">$&#123;email&#125;</span>是合法的邮箱&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正则2：过滤所有不合法的邮箱</span></span><br><span class="line"><span class="keyword">val</span> list14 = <span class="type">List</span>(<span class="string">&quot;123456789@qq.com&quot;</span>, <span class="string">&quot;a1da7897689@gmail.com&quot;</span>, <span class="string">&quot;123afaadd.com&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> regex1 = <span class="string">&quot;&quot;&quot;.+@.+\..+&quot;&quot;&quot;</span>.r</span><br><span class="line"><span class="keyword">val</span> filterList = list14.filter(regex1.findAllMatchIn(_).nonEmpty)</span><br><span class="line">println(filterList)</span><br><span class="line"><span class="comment">// 正则3：获取邮箱运营商</span></span><br><span class="line"><span class="keyword">val</span> list15 = <span class="type">List</span>(<span class="string">&quot;hkjcpdd@qq.com&quot;</span>, <span class="string">&quot;hkjmjj@gmail.com&quot;</span>, <span class="string">&quot;zhangsan@163.com&quot;</span>, <span class="string">&quot;123foshana.com&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> regex2 = <span class="string">&quot;&quot;&quot;.+@(.+)\..+&quot;&quot;&quot;</span>.r</span><br><span class="line"><span class="keyword">val</span> filterList1 = list15.map &#123;</span><br><span class="line">  <span class="comment">//固定格式 表示要校验的邮箱，固定格式  正则对象（对应的是正则中的分组内容）  固定格式  邮箱-&gt;运营商</span></span><br><span class="line">  <span class="comment">// 这里@是匹配的意思，就是后者正则匹配成功的就赋值给x</span></span><br><span class="line">  <span class="keyword">case</span> x<span class="meta">@regex</span>2(company) =&gt; x -&gt; company</span><br><span class="line">  <span class="keyword">case</span> x =&gt; x -&gt; <span class="string">&quot;未匹配&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(filterList1)</span><br></pre></td></tr></table></figure><h3 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4.异常处理"></a>4.异常处理</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异常处理</span></span><br><span class="line"><span class="comment">// 方式一：补货异常</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// 可能出现问题的代码</span></span><br><span class="line">  <span class="comment">//      val i = 10 / 0</span></span><br><span class="line">  <span class="keyword">val</span> i = <span class="number">10</span> / <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">  <span class="comment">// 出现问题后的解决方案</span></span><br><span class="line">  <span class="comment">//      case ex:ArithmeticException =&gt; println(&quot;算术异常&quot;)</span></span><br><span class="line">  <span class="keyword">case</span> ex: <span class="type">Exception</span> =&gt; ex.printStackTrace()</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  <span class="comment">// 这里一般用来释放资源的</span></span><br><span class="line">  println(<span class="string">&quot;我是用来释放资源的&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方式二：抛出异常</span></span><br><span class="line"><span class="comment">//    throw new Exception(&quot;我是一个异常&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="5-提取器"><a href="#5-提取器" class="headerlink" title="5.提取器"></a>5.提取器</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 提取器</span></span><br><span class="line"><span class="comment">// 方式1 普通写法</span></span><br><span class="line"><span class="keyword">val</span> s1 = <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="comment">// 方式2  免new</span></span><br><span class="line"><span class="keyword">val</span> s2 = <span class="type">Student</span>(<span class="string">&quot;李四&quot;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="comment">// 获取对象中的各个属性值，然后打印</span></span><br><span class="line"><span class="comment">// 方式1 普通获取</span></span><br><span class="line">println(s1.name, s1.age, s2.name, s2.age)</span><br><span class="line"><span class="comment">// 方式2 直接调用unapply方法</span></span><br><span class="line"><span class="type">Student</span>.unapply(s1)</span><br><span class="line"><span class="comment">// 方式3 通过模式匹配获取</span></span><br><span class="line">s1 <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Student</span>(name, age) =&gt; println(name, age)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;未匹配&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-案例：随机职业"><a href="#6-案例：随机职业" class="headerlink" title="6.案例：随机职业"></a>6.案例：随机职业</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 随机职业</span></span><br><span class="line"><span class="comment">// 1.提示用户录入整数，匹配对应的职业</span></span><br><span class="line">println(<span class="string">&quot;请录入一个整数1~5， 我来告诉你上辈子的职业:&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> num = <span class="type">StdIn</span>.readInt()</span><br><span class="line"><span class="keyword">val</span> occupation = num <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;人机&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;人才&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;黄凯君&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;黄开俊&quot;</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">1</span> =&gt; <span class="string">&quot;黄凯军&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt; <span class="string">&quot;未匹配&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">println(occupation)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> scala </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> 模式匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala - 函数式编程</title>
      <link href="/posts/a3f7.html"/>
      <url>/posts/a3f7.html</url>
      
        <content type="html"><![CDATA[<h2 id="scala函数式编程"><a href="#scala函数式编程" class="headerlink" title="scala函数式编程"></a>scala函数式编程</h2><h3 id="1-foreach方法"><a href="#1-foreach方法" class="headerlink" title="1.foreach方法"></a>1.foreach方法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历列表、数组</span></span><br><span class="line"><span class="keyword">val</span> list1 = (<span class="number">1</span> to <span class="number">5</span>).toList</span><br><span class="line"><span class="comment">// foreach方法</span></span><br><span class="line">list1.foreach(println(_))</span><br></pre></td></tr></table></figure><h3 id="2-映射map"><a href="#2-映射map" class="headerlink" title="2.映射map"></a>2.映射map</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将结果整理成想要的</span></span><br><span class="line"><span class="keyword">val</span> list2 = list1.map(<span class="string">&quot;*&quot;</span> * _)</span><br><span class="line">println(<span class="string">&quot;映射&quot;</span> + list2)</span><br></pre></td></tr></table></figure><h3 id="3-扁平化映射flatMap"><a href="#3-扁平化映射flatMap" class="headerlink" title="3.扁平化映射flatMap"></a>3.扁平化映射flatMap</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将结果先进行映射然后进行扁平化</span></span><br><span class="line"><span class="keyword">val</span> list3 = <span class="type">List</span>((<span class="string">&quot;hkjcpdd hkjmjj hkjppp&quot;</span>), (<span class="string">&quot;hkjcpdd hkjmjj hkjppp&quot;</span>))</span><br><span class="line"><span class="keyword">val</span> list4 = list3.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">println(<span class="string">&quot;扁平化映射&quot;</span> + list4)</span><br></pre></td></tr></table></figure><h3 id="4-排序"><a href="#4-排序" class="headerlink" title="4.排序"></a>4.排序</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统排序sorted如果需要反转在用完sorted之后reverse就好了</span></span><br><span class="line"><span class="keyword">val</span> list6 = <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">println(<span class="string">&quot;传统排序&quot;</span> + list6.sorted.rever</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 指定字段排序</span></span><br><span class="line"><span class="keyword">val</span> list7 = <span class="type">List</span>(<span class="string">&quot;01 hadoop&quot;</span>, <span class="string">&quot;02 flume&quot;</span>, <span class="string">&quot;03 spark&quot;</span>)</span><br><span class="line">println(<span class="string">&quot;指定字段排序&quot;</span> + list7.sortBy(_.split(<span class="string">&quot; &quot;</span>)(<span class="number">1</span>))</span><br><span class="line">                                             </span><br><span class="line"><span class="comment">// 自定义排序</span></span><br><span class="line">println(<span class="string">&quot;自定义排序&quot;</span> + list1.sortWith((x, y) =&gt; x &gt; y))</span><br></pre></td></tr></table></figure><h3 id="5-分组"><a href="#5-分组" class="headerlink" title="5.分组"></a>5.分组</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分组</span></span><br><span class="line"><span class="keyword">val</span> list8 = <span class="type">List</span>(<span class="string">&quot;刘德华&quot;</span> -&gt; <span class="string">&quot;男&quot;</span>, <span class="string">&quot;黄凯军&quot;</span> -&gt; <span class="string">&quot;男&quot;</span>, <span class="string">&quot;黄凯俊&quot;</span> -&gt; <span class="string">&quot;女&quot;</span> ,<span class="string">&quot;黄凯君&quot;</span> -&gt; <span class="string">&quot;男&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> map1 = list8.groupBy(_._2)</span><br><span class="line"><span class="keyword">val</span> map2 = map1.map(x =&gt; x._1 -&gt; x._2.size)</span><br><span class="line"><span class="type">Console</span>.println(map2)</span><br></pre></td></tr></table></figure><h3 id="6-聚合操作"><a href="#6-聚合操作" class="headerlink" title="6.聚合操作"></a>6.聚合操作</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聚合操作 reduce用来对集合元素进行聚合计算 fold用来对集合进行折叠计算</span></span><br><span class="line"><span class="keyword">val</span> list9 = (<span class="number">1</span> to <span class="number">10</span>).toList</span><br><span class="line"><span class="comment">// 使用reduce计算所有元素的和</span></span><br><span class="line"><span class="type">Console</span>.println(<span class="string">&quot;reduce聚合= &quot;</span> + list9.reduce((x, y) =&gt; x - y))</span><br><span class="line"><span class="type">Console</span>.println(<span class="string">&quot;reduceLeft聚合 = &quot;</span> + list9.reduceLeft((x, y) =&gt; x - y))</span><br><span class="line"><span class="type">Console</span>.println(<span class="string">&quot;reduceRight聚合 = &quot;</span> + list9.reduceRight((x, y) =&gt; x -y))</span><br><span class="line"></span><br><span class="line"><span class="comment">// fold与reduce很像,只不过多了一个指定初始值参数 100表示初始化值, 后面表示函数对象</span></span><br><span class="line"><span class="type">Console</span>.println(<span class="string">&quot;fold = &quot;</span> + list9.fold(<span class="number">100</span>)((x, y) =&gt; x + y))</span><br><span class="line"><span class="type">Console</span>.println(<span class="string">&quot;foldLeft&quot;</span> + list9.foldLeft(<span class="number">100</span>)(_ + _))</span><br><span class="line"><span class="type">Console</span>.println(<span class="string">&quot;foldRight&quot;</span> + list9.foldRight(<span class="number">100</span>)(_ + _))</span><br></pre></td></tr></table></figure><h3 id="7-具体案例（学生成绩单）"><a href="#7-具体案例（学生成绩单）" class="headerlink" title="7.具体案例（学生成绩单）"></a>7.具体案例（学生成绩单）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 学生成绩单</span></span><br><span class="line"><span class="keyword">val</span> listStu = <span class="type">List</span>((<span class="string">&quot;李四&quot;</span>, <span class="number">21</span>, <span class="number">89</span> ,<span class="number">43</span>), (<span class="string">&quot;王五&quot;</span>, <span class="number">56</span>, <span class="number">89</span>, <span class="number">98</span>), (<span class="string">&quot;赵柳&quot;</span>, <span class="number">66</span>, <span class="number">33</span>, <span class="number">55</span>), (<span class="string">&quot;黄凯君&quot;</span>, <span class="number">23</span>, <span class="number">54</span>, <span class="number">22</span>))</span><br><span class="line"><span class="comment">// 获取所有语文成绩在60及以上的</span></span><br><span class="line"><span class="keyword">val</span> filterList = listStu.filter(_._2 &gt;= <span class="number">60</span>)</span><br><span class="line">println(filterList.map(_._1))</span><br><span class="line"><span class="comment">// 获取所有学生的总成绩</span></span><br><span class="line"><span class="keyword">val</span> <span class="type">SumList</span> = listStu.map(x =&gt; x._1 -&gt; (x._2 + x._3 + x._4))</span><br><span class="line">println(<span class="string">&quot;所有学生的总成绩: &quot;</span> + <span class="type">SumList</span>)</span><br><span class="line"><span class="comment">// 按照总成绩降序排列</span></span><br><span class="line">println(<span class="string">&quot;按照总成绩进行排序&quot;</span> + <span class="type">SumList</span>.sortWith((x, y) =&gt; x._2 &lt; x._2))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala-读取写入序列化</title>
      <link href="/posts/b9a6.html"/>
      <url>/posts/b9a6.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-读取数据"><a href="#1-读取数据" class="headerlink" title="1.读取数据"></a>1.读取数据</h2><h3 id="1-1按行读取"><a href="#1-1按行读取" class="headerlink" title="1.1按行读取"></a>1.1按行读取</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按行读取</span></span><br><span class="line"><span class="comment">// 创建Source对象，关联数据源文件</span></span><br><span class="line"><span class="keyword">val</span> source = <span class="type">Source</span>.fromFile(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\1.txt&quot;</span>)</span><br><span class="line"><span class="comment">// 以行为单位，来读取数据</span></span><br><span class="line"><span class="keyword">val</span> lines: <span class="type">Iterator</span>[<span class="type">String</span>] = source.getLines()</span><br><span class="line"><span class="comment">// 将读取到的数据封装到list列表中</span></span><br><span class="line"><span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">String</span>] = lines.toList</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="keyword">for</span> (data &lt;- list) println(data)</span><br><span class="line"><span class="comment">// 关闭Source对象</span></span><br><span class="line">source.close()</span><br></pre></td></tr></table></figure><h3 id="1-2按字符读取"><a href="#1-2按字符读取" class="headerlink" title="1.2按字符读取"></a>1.2按字符读取</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按字符读取</span></span><br><span class="line"><span class="keyword">val</span> source1 = <span class="type">Source</span>.fromFile(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\1.txt&quot;</span>)</span><br><span class="line"><span class="comment">// 拆干见source对象关联数据源</span></span><br><span class="line"><span class="keyword">val</span> iter: <span class="type">BufferedIterator</span>[<span class="type">Char</span>] = source1.buffered</span><br><span class="line"><span class="comment">// 已字符为单位来读取数据</span></span><br><span class="line"><span class="keyword">while</span> (iter.hasNext) &#123;</span><br><span class="line">  <span class="comment">// 打印读取到的数据 hasNext(), next()</span></span><br><span class="line">  print(iter.next())</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭source对象</span></span><br><span class="line">source.close()</span><br></pre></td></tr></table></figure><h3 id="1-3优化版（字符串版）"><a href="#1-3优化版（字符串版）" class="headerlink" title="1.3优化版（字符串版）"></a>1.3优化版（字符串版）</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化版，如果文件中的内容较少，我们可以直接把它读取到一个字符串中</span></span><br><span class="line"><span class="keyword">val</span> source2 = <span class="type">Source</span>.fromFile(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\1.txt&quot;</span>)</span><br><span class="line"><span class="comment">// 将数据读取到一个字符串中</span></span><br><span class="line"><span class="keyword">val</span> str: <span class="type">String</span> = source2.mkString</span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">println(str)</span><br><span class="line"><span class="comment">// 关闭source对象</span></span><br><span class="line">source2.close()</span><br></pre></td></tr></table></figure><h3 id="1-4读取词法单词和数字"><a href="#1-4读取词法单词和数字" class="headerlink" title="1.4读取词法单词和数字"></a>1.4读取词法单词和数字</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取词法单元和数字</span></span><br><span class="line"><span class="keyword">val</span> source3 = <span class="type">Source</span>.fromFile(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\2.txt&quot;</span>)</span><br><span class="line"><span class="comment">//将其所有数据封装到一个字符串中</span></span><br><span class="line"><span class="keyword">val</span> str1 = source3.mkString</span><br><span class="line"><span class="comment">// 按照空白字符进行切割，获取到字符串数组</span></span><br><span class="line"><span class="keyword">val</span> strArray: <span class="type">Array</span>[<span class="type">String</span>] = str1.split(<span class="string">&quot;\\s+&quot;</span>)</span><br><span class="line"><span class="comment">// 将上诉的字符串数组转换成int类型的数组</span></span><br><span class="line"><span class="keyword">val</span> intArray: <span class="type">Array</span>[<span class="type">Int</span>] = strArray.map(_.toInt)</span><br><span class="line"><span class="keyword">for</span> (data &lt;- intArray) print(data + <span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="comment">// 关闭source</span></span><br><span class="line">source3.close()</span><br></pre></td></tr></table></figure><h3 id="1-5从Url或者其他源中读取数据"><a href="#1-5从Url或者其他源中读取数据" class="headerlink" title="1.5从Url或者其他源中读取数据"></a>1.5从Url或者其他源中读取数据</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从url或者其他源读取数据</span></span><br><span class="line"><span class="comment">//读取传智播客官网的数据</span></span><br><span class="line"><span class="keyword">val</span> source4 = <span class="type">Source</span>.fromURL(<span class="string">&quot;https://www.itcast.cn&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> str2 = source4.mkString</span><br><span class="line">println(str2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接从字符串 黑马程序员中读取数据</span></span><br><span class="line"><span class="keyword">val</span> source5 = <span class="type">Source</span>.fromString(<span class="string">&quot;黑马程序员&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> str3 = source5.mkString</span><br><span class="line">println(str3)</span><br></pre></td></tr></table></figure><h3 id="1-6读取二进制文件"><a href="#1-6读取二进制文件" class="headerlink" title="1.6读取二进制文件"></a>1.6读取二进制文件</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取二进制文件</span></span><br><span class="line"><span class="comment">// 创建file对象，关联数据源文件</span></span><br><span class="line"><span class="keyword">val</span> file = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\1732176591422.png&quot;</span>)</span><br><span class="line"><span class="comment">// 创建字节输入流，关联数据源文件</span></span><br><span class="line"><span class="keyword">val</span> fis = <span class="keyword">new</span> <span class="type">FileInputStream</span>(file)</span><br><span class="line"><span class="comment">// 创建字节数组，用来存储读取到的内容</span></span><br><span class="line"><span class="keyword">val</span> bys = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Byte</span>](file.length().toInt)</span><br><span class="line"><span class="comment">// 开始读取，将读取到的数据存储到字节数组中，病返回读取到的有效字节数</span></span><br><span class="line"><span class="keyword">val</span> len = fis.read(bys)</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line">println(<span class="string">&quot;读取到的有效字节数：&quot;</span> + len)</span><br><span class="line">println(<span class="string">&quot;字节数组的长度&quot;</span> + bys.length)</span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line">fis.close()</span><br></pre></td></tr></table></figure><h2 id="2-写入数据"><a href="#2-写入数据" class="headerlink" title="2.写入数据"></a>2.写入数据</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入数据</span></span><br><span class="line"><span class="comment">// 创建字节输出流对象，关联目的地文件</span></span><br><span class="line"><span class="keyword">val</span> fos = <span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\4.txt&quot;</span>)</span><br><span class="line"><span class="comment">// 直接往目的地文件中编写指定的内容</span></span><br><span class="line">fos.write(<span class="string">&quot;黄凯君cpdd\r\n 黄凯君mjj&quot;</span>.getBytes)</span><br><span class="line"><span class="comment">// 关闭字节输出流</span></span><br><span class="line">fos.close()</span><br></pre></td></tr></table></figure><h2 id="3-序列化和反序列化"><a href="#3-序列化和反序列化" class="headerlink" title="3.序列化和反序列化"></a>3.序列化和反序列化</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 序列化和反序列化</span></span><br><span class="line"><span class="comment">// 演示序列化操作，即：将对象写入到文件中.</span></span><br><span class="line"><span class="comment">// 创建Person类型的对象</span></span><br><span class="line"><span class="keyword">val</span> p = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;黄凯君&quot;</span>, <span class="number">23</span>)</span><br><span class="line"><span class="comment">// 创建序列哈流，用来讲对象写入到文件中</span></span><br><span class="line"><span class="keyword">val</span> oos = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\5.txt&quot;</span>))</span><br><span class="line"><span class="comment">// 调用writeObject()方法， 将对象写入到文件中</span></span><br><span class="line">oos.writeObject(p)</span><br><span class="line">oos.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 反序列化操作，即：从文件中直接读取对象</span></span><br><span class="line"><span class="comment">// 创建反序列化流，关联数据源文件</span></span><br><span class="line"><span class="keyword">val</span> ois = <span class="keyword">new</span> <span class="type">ObjectInputStream</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\5.txt&quot;</span>))</span><br><span class="line"><span class="comment">// 调用readObject()方法，从数据源文件中读取指定的对象</span></span><br><span class="line"><span class="comment">// 细节：我们获取到的对象是AnyRef类型，所以需要转换成Person类型</span></span><br><span class="line"><span class="keyword">val</span> p1 = ois.readObject().asInstanceOf[<span class="type">Person</span>]</span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line">println(p1.name, p1.age)</span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line">ois.close()</span><br></pre></td></tr></table></figure><h2 id="案例：学生成绩单"><a href="#案例：学生成绩单" class="headerlink" title="案例：学生成绩单"></a>案例：学生成绩单</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例：学院成绩表</span></span><br><span class="line"><span class="comment">// 创建source对象并且关联数据源</span></span><br><span class="line"><span class="keyword">val</span> source9 = <span class="type">Source</span>.fromFile(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\Student.txt&quot;</span>)</span><br><span class="line"><span class="comment">// 讲数据原一行一行读出来，并且已空格为分割符存入数组</span></span><br><span class="line"><span class="keyword">val</span> stuArray = source9.getLines().map(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="comment">// 创建可变列表</span></span><br><span class="line"><span class="keyword">val</span> studentList = <span class="type">ListBuffer</span>[<span class="type">Student</span>]()</span><br><span class="line"><span class="comment">// 将数据数组中的每一个存入列表中 这里的转换是方便添加总成绩进去，list方便动态加入</span></span><br><span class="line"><span class="keyword">for</span> (s &lt;- stuArray) &#123;</span><br><span class="line">  studentList += <span class="keyword">new</span> <span class="type">Student</span>(s(<span class="number">0</span>), s(<span class="number">1</span>).toInt, s(<span class="number">2</span>).toInt, s(<span class="number">3</span>).toInt)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将列表中的数据按照总分降序排列</span></span><br><span class="line"><span class="keyword">val</span> sortList = studentList.sortBy(_.getSum).reverse.toList</span><br><span class="line"><span class="comment">// 将处理好的数据存入指定位置</span></span><br><span class="line"><span class="keyword">val</span> bw = <span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">FileWriter</span>(<span class="string">&quot;J:\\大数据第一代项目\\scalaFlink\\data\\Student1.txt&quot;</span>))</span><br><span class="line"><span class="comment">// 将数据写入</span></span><br><span class="line"><span class="keyword">for</span> (s &lt;- sortList) &#123;</span><br><span class="line">  <span class="comment">// s 表示排序后每一个学生的信息</span></span><br><span class="line">  bw.write(<span class="string">s&quot;<span class="subst">$&#123;s.name&#125;</span>, <span class="subst">$&#123;s.Chinese&#125;</span>, <span class="subst">$&#123;s.Math&#125;</span>, <span class="subst">$&#123;s.English&#125;</span>, <span class="subst">$&#123;s.getSum&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="comment">// 每写完一个学生进行换行</span></span><br><span class="line">  bw.newLine()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭</span></span><br><span class="line">bw.close()</span><br><span class="line">source9.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala</title>
      <link href="/posts/b9a6.html"/>
      <url>/posts/b9a6.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scala位运算符</title>
      <link href="/posts/d591.html"/>
      <url>/posts/d591.html</url>
      
        <content type="html"><![CDATA[<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><p>  <img src="https://pic.imgdb.cn/item/67242470d29ded1a8cd11909.png"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scala&gt; print(a &amp; b)# 相同为<span class="number">1</span>=上下想乘</span><br><span class="line">scala&gt; print(a | b) # 有<span class="number">1</span>则<span class="number">1</span></span><br><span class="line">scala&gt; print(a ^ b) # 不同为<span class="number">1</span></span><br><span class="line">scala&gt; print(~a) # 按位取反 因为拿到的是补码，<span class="number">-1</span>然后的到反码，反码符号位不变，其他按位取反</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> demo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(第二套)ZZ052大数据应用与服务赛项赛题</title>
      <link href="/posts/b2b7.html"/>
      <url>/posts/b2b7.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块一：平台搭建与运维"><a href="#模块一：平台搭建与运维" class="headerlink" title="模块一：平台搭建与运维"></a>模块一：平台搭建与运维</h2><h3 id="（一）任务一：大数据平台搭建"><a href="#（一）任务一：大数据平台搭建" class="headerlink" title="（一）任务一：大数据平台搭建"></a><strong>（一）任务一：大数据平台搭建</strong></h3><h4 id="1．子任务一：基础环境准备"><a href="#1．子任务一：基础环境准备" class="headerlink" title="1．子任务一：基础环境准备"></a><strong>1．子任务一：基础环境准备</strong></h4><p>（1）对三台环境更新主机名，配置hosts文件，以node01作为时钟源并进行时间同步；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他三台一样</span></span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname master</span><br><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p>（2）执行命令生成公钥、私钥，实现三台机器间的免秘登陆；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他三台一样</span></span><br><span class="line">[root@localhost ~]# ssh-keygen</span><br><span class="line">[root@localhost ~]# ssh-copy-id master</span><br><span class="line">[root@localhost ~]# ssh-copy-id slave1</span><br><span class="line">[root@localhost ~]# ssh-copy-id slave2</span><br></pre></td></tr></table></figure><p>（3）从宿主机&#x2F;root 目录下将文件 jdk-8u212-linux-x64.tar.gz 复制到容器 node01 中的&#x2F;root&#x2F;software 路径中（若路径不存在，则需新建），将 node01 节点 JDK 安装包解压到&#x2F;root&#x2F;software 路径中(若路径不存在，则需新建)；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# mkdir /root/software</span><br><span class="line">[root@localhost software]# tar -zxvf /opt/software/jdk-8u391-linux-x64.tar.gz -C /root/software/</span><br></pre></td></tr></table></figure><p>（4）修改容器中&#x2F;etc&#x2F;profile 文件，设置 JDK 环境变量并使其生效，配置完毕后在 node01 节点分别执行“java - version”和“javac”命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# vi /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增</span></span><br><span class="line">export JAVA_HOME=/root/software/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">[root@localhost software]# source /etc/profile</span><br><span class="line">[root@localhost software]# java -version</span><br><span class="line">java version &quot;1.8.0_391&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_391-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.391-b13, mixed mode)</span><br><span class="line">[root@localhost software]# javac</span><br><span class="line">用法: javac &lt;options&gt; &lt;source files&gt;</span><br><span class="line">其中, 可能的选项包括:</span><br><span class="line">  -g                         生成所有调试信息</span><br><span class="line">  -g:none                    不生成任何调试信息</span><br><span class="line">  -g:&#123;lines,vars,source&#125;     只生成某些调试信息</span><br><span class="line">  -nowarn                    不生成任何警告</span><br><span class="line">  -verbose                   输出有关编译器正在执行的操作的消息</span><br><span class="line">  -deprecation               输出使用已过时的 API 的源位置</span><br><span class="line">  -classpath &lt;路径&gt;            指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -cp &lt;路径&gt;                   指定查找用户类文件和注释处理程序的位置</span><br><span class="line">  -sourcepath &lt;路径&gt;           指定查找输入源文件的位置</span><br><span class="line">  -bootclasspath &lt;路径&gt;        覆盖引导类文件的位置</span><br><span class="line">  -extdirs &lt;目录&gt;              覆盖所安装扩展的位置</span><br><span class="line">  -endorseddirs &lt;目录&gt;         覆盖签名的标准路径的位置</span><br><span class="line">  -proc:&#123;none,only&#125;          控制是否执行注释处理和/或编译。</span><br><span class="line">  -processor &lt;class1&gt;[,&lt;class2&gt;,&lt;class3&gt;...] 要运行的注释处理程序的名称; 绕过默认的搜索进程</span><br><span class="line">  -processorpath &lt;路径&gt;        指定查找注释处理程序的位置</span><br><span class="line">  -parameters                生成元数据以用于方法参数的反射</span><br><span class="line">  -d &lt;目录&gt;                    指定放置生成的类文件的位置</span><br><span class="line">  -s &lt;目录&gt;                    指定放置生成的源文件的位置</span><br><span class="line">  -h &lt;目录&gt;                    指定放置生成的本机标头文件的位置</span><br><span class="line">  -implicit:&#123;none,class&#125;     指定是否为隐式引用文件生成类文件</span><br><span class="line">  -encoding &lt;编码&gt;             指定源文件使用的字符编码</span><br><span class="line">  -source &lt;发行版&gt;              提供与指定发行版的源兼容性</span><br><span class="line">  -target &lt;发行版&gt;              生成特定 VM 版本的类文件</span><br><span class="line">  -profile &lt;配置文件&gt;            请确保使用的 API 在指定的配置文件中可用</span><br><span class="line">  -version                   版本信息</span><br><span class="line">  -help                      输出标准选项的提要</span><br><span class="line">  -A关键字[=值]                  传递给注释处理程序的选项</span><br><span class="line">  -X                         输出非标准选项的提要</span><br><span class="line">  -J&lt;标记&gt;                     直接将 &lt;标记&gt; 传递给运行时系统</span><br><span class="line">  -Werror                    出现警告时终止编译</span><br><span class="line">  @&lt;文件名&gt;                     从文件读取选项和文件名</span><br></pre></td></tr></table></figure><h4 id="2．子任务二：Hadoop-完全分布式安装配置"><a href="#2．子任务二：Hadoop-完全分布式安装配置" class="headerlink" title="2．子任务二：Hadoop 完全分布式安装配置"></a><strong>2．子任务二：Hadoop 完全分布式安装配置</strong></h4><p>本任务需要使用 root 用户完成相关配置，安装 Hadoop需要配置前置环境。命令中要求使用绝对路径，具体要求如下:</p><p>（1）在 node01 将 Hadoop 解压到&#x2F;root&#x2F;software(若路径不存在，则需新建)目录下，并将解压包分发至 node02、node03 中，其中三节点节点均作为 datanode，配置好相关环境，初始化 Hadoop 环境 namenode；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# tar -zxvf /opt/software/hadoop-3.3.6.tar.gz -C /root/software/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">分发</span></span><br><span class="line">[root@localhost software]# scp -r jdk/ hadoop/ slave1:`pwd`</span><br><span class="line">[root@localhost software]# scp -r jdk/ hadoop/ slave2:`pwd`</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化</span></span><br><span class="line">[root@localhost software]# hadoop namenode -format</span><br></pre></td></tr></table></figure><p>（2）开启集群，查看各节点进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">[root@localhost software]# start-all.sh</span><br><span class="line">[root@localhost software]# jps</span><br><span class="line">47810 ResourceManager</span><br><span class="line">48597 WebAppProxyServer</span><br><span class="line">49205 JobHistoryServer</span><br><span class="line">47450 SecondaryNameNode</span><br><span class="line">49371 Jps</span><br><span class="line">48060 NodeManager</span><br><span class="line">46766 NameNode</span><br><span class="line">47134 DataNode</span><br></pre></td></tr></table></figure><h4 id="3．子任务三：Hive-安装配置"><a href="#3．子任务三：Hive-安装配置" class="headerlink" title="3．子任务三：Hive 安装配置"></a><strong>3．子任务三：Hive 安装配置</strong></h4><p>（1）从宿主机&#x2F;root 目录下将文件 apache-hive-3.1.2-bin.tar.gz、mysql-connector-java-5.1.37.jar 复制到容器 node03 中的&#x2F;root&#x2F;software 路径中（若路径不存在，则需新建），将 node03 节点 Hive 安装包解压到&#x2F;root&#x2F;software目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# tar -zxvf /opt/software/apache-hive-3.1.3-bin.tar.gz -C /root/software/</span><br></pre></td></tr></table></figure><p>（2）设置 Hive 环境变量，并使环境变量生效，执行命令 hive –version 查看版本信息；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# vi /etc/profile</span><br><span class="line">export JAVA_HOME=/root/software/jdk</span><br><span class="line">export HADOOP_HOME=/root/software/hadoop</span><br><span class="line">export HIVE_HOME=/root/software/hive</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$HIVE_HOME/bin</span><br><span class="line"></span><br><span class="line">[root@master conf]# hive --version</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hive/lib/log4j-slf4j-impl-2.17.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hadoop/share/hadoop/common/lib/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Hive 3.1.3</span><br><span class="line">Git git://MacBook-Pro.fios-router.home/Users/ngangam/commit/hive -r 4df4d75bf1e16fe0af75aad0b4179c34c07fc975</span><br><span class="line">Compiled by ngangam on Sun Apr 3 16:58:16 EDT 2022</span><br><span class="line">From source with checksum 5da234766db5dfbe3e92926c9bbab2af</span><br></pre></td></tr></table></figure><p>（3）修改相关配置，添加依赖包，将 MySQL 数据库作为Hive 元数据库，初始化 Hive 元数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置好hive-env.sh和hive-site.xml</span></span><br><span class="line">[root@master conf]# cp /opt/software/mysql-connector-java-5.1.34.jar /root/software/hive/lib/</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化</span></span><br><span class="line">[root@master conf]# schematool -initSchema -dbType mysql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">[root@master hive]# mkdir logs</span><br><span class="line">[root@master hive]# nohup hive --service metastore &gt;&gt; logs/metastore.log 2&gt;&amp;1 &amp;</span><br><span class="line">[1] 128547</span><br><span class="line"></span><br><span class="line">[root@master hive]# hive</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hive/lib/log4j-slf4j-impl-2.17.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hadoop/share/hadoop/common/lib/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">which: no hbase in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/software/jdk/bin:/root/software/hadoop/bin:/root/software/hadoop/sbin:/root/software/hive/bin:/root/bin)</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hive/lib/log4j-slf4j-impl-2.17.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hadoop/share/hadoop/common/lib/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Hive Session ID = 7e262d28-438c-4922-af9c-1323adfa7f88</span><br><span class="line"></span><br><span class="line">Logging initialized using configuration in jar:file:/root/software/hive/lib/hive-common-3.1.3.jar!/hive-log4j2.properties Async: true</span><br><span class="line">Hive-on-MR is deprecated in Hive 2 and may not be available in the future versions. Consider using a different execution engine (i.e. spark, tez) or using Hive 1.X releases.</span><br><span class="line">Hive Session ID = 195fb209-4ef9-4452-bbdd-90b81a8d04bc</span><br><span class="line"><span class="meta prompt_">hive&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4．子任务四：Flume 安装配置</strong> </p><p>（1）从宿主机&#x2F;root 目录下将文件 apache-flume-1.11.0-bin.tar.gz复制到容器node03中的&#x2F;root&#x2F;software路径中（若路径不存在，则需新建），将 node03 节点 Flume安装包解压到&#x2F;root&#x2F;software 目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# tar -zxvf /opt/software/apache-flume-1.11.0-bin.tar.gz -C /root/software/</span><br></pre></td></tr></table></figure><p>（2）完善相关配置，配置 Flume 环境变量，并使环境变量生效，执行命令 flume-ng version。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# vi /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新增</span></span><br><span class="line">export FLUME_HOME_HOME=/root/software/flume</span><br><span class="line">export PATH=$PATH:$FLUME_HOME/bin</span><br><span class="line">[root@master software]# source /etc/profile</span><br><span class="line"></span><br><span class="line">[root@master software]# flume-ng version</span><br><span class="line">Flume 1.11.0</span><br><span class="line">Source code repository: https://git.apache.org/repos/asf/flume.git</span><br><span class="line">Revision: 1a15927e594fd0d05a59d804b90a9c31ec93f5e1</span><br><span class="line">Compiled by rgoers on Sun Oct 16 14:44:15 MST 2022</span><br><span class="line">From source with checksum bbbca682177262aac3a89defde369a37</span><br></pre></td></tr></table></figure><h3 id="（二）任务二：数据库配置维护"><a href="#（二）任务二：数据库配置维护" class="headerlink" title="（二）任务二：数据库配置维护"></a><strong>（二）任务二：数据库配置维护</strong></h3><h4 id="1．子任务一：数据库配置"><a href="#1．子任务一：数据库配置" class="headerlink" title="1．子任务一：数据库配置"></a><strong>1．子任务一：数据库配置</strong></h4><p>（1）在主机 node3 上安装 mysql-community-server，启动 mySQL 服务，根据临时密码进入数据库，并修改本地密码为“123456”；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@master</span> software]# rpm <span class="operator">-</span>ivh mysql<span class="operator">-</span>community<span class="operator">-</span>server<span class="number">-5.7</span><span class="number">.44</span><span class="number">-1.</span>el7.x86_64.rpm </span><br><span class="line">警告：mysql<span class="operator">-</span>community<span class="operator">-</span>server<span class="number">-5.7</span><span class="number">.44</span><span class="number">-1.</span>el7.x86_64.rpm: 头V4 RSA<span class="operator">/</span>SHA256 Signature, 密钥 ID <span class="number">3</span>a79bd29: NOKEY</span><br><span class="line">准备中...                          ################################# [<span class="number">100</span><span class="operator">%</span>]</span><br><span class="line">正在升级<span class="operator">/</span>安装...</span><br><span class="line">   <span class="number">1</span>:mysql<span class="operator">-</span>community<span class="operator">-</span>server<span class="number">-5.7</span><span class="number">.44</span><span class="number">-1.</span>e################################# [<span class="number">100</span><span class="operator">%</span>]</span><br><span class="line">[root<span class="variable">@master</span> software]# systemctl <span class="keyword">start</span> mysqld</span><br><span class="line">[root<span class="variable">@master</span> software]# mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">2</span></span><br><span class="line">Server version: <span class="number">5.7</span><span class="number">.44</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2023</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><p>（2）开启 MySQL 远程连接权限，所有 root 用户都可以使用 123456 进行登录连接。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind<span class="operator">-</span>address<span class="operator">=</span><span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> mysql.user <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;mysql.sys&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>2．子任务二：导入相关表</strong> </p><p>（1）将本地&#x2F;root&#x2F;eduhq&#x2F;equipment&#x2F;目录下的数据文件 root_sl_src.sql 导入 MySQL 对应数据库 root_sl_src；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash">use root_sl_src</span></span><br><span class="line"><span class="meta prompt_">mysql&gt; </span><span class="language-bash"><span class="built_in">source</span> root_sl_src.sql</span></span><br></pre></td></tr></table></figure><p>（2）将本地&#x2F;root&#x2F;eduhq&#x2F;equipment&#x2F;目录下的数据文件 root_sl_ugoogds_src.sql 导 入 MySQL 对应数据库root_sl_ugoogds_src。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> use root_sl_ugoogds_src</span><br><span class="line">mysql<span class="operator">&gt;</span> source root_sl_ugoogds_src.sql</span><br></pre></td></tr></table></figure><p><strong>3．子任务三：维护数据表</strong> </p><p>结合已导入的两份 sql 数据，对其中的数据进行如下查询和操作。</p><p>（1）对‘root_sl_src’数据库中的‘province’数据表进行修改，修改字段 province_id 为 24 的记录的province_name，修改为‘内蒙古自治区’；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> province <span class="keyword">set</span> province_name<span class="operator">=</span><span class="string">&#x27;内蒙古自治区&#x27;</span> <span class="keyword">where</span> province_id<span class="operator">=</span><span class="number">24</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.01</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br></pre></td></tr></table></figure><p>（2）对‘root_sl_src’数据库中的‘city’数据表进行删除，删除字段 city_id 为 142 的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">delete</span> <span class="keyword">from</span> city <span class="keyword">where</span> city_id<span class="operator">=</span><span class="number">142</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.03</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛赛题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(第一套)ZZ052大数据应用与服务赛项赛题</title>
      <link href="/posts/b2b6.html"/>
      <url>/posts/b2b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="模块一：平台搭建与运维"><a href="#模块一：平台搭建与运维" class="headerlink" title="模块一：平台搭建与运维"></a>模块一：平台搭建与运维</h2><p><strong>（一）任务一：大数据平台搭建</strong> </p><p>本模块需要使用 root 用户完成相关配置；所有组件均</p><p>在&#x2F;root&#x2F;software 目录下。</p><h2 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">三台机都要</span></span><br><span class="line">[root@localhost ~]# systemctl stop firewalld</span><br><span class="line">[root@localhost ~]# systemctl disable firewalld</span><br><span class="line">Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.</span><br><span class="line">Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service.</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# vi /etc/hosts</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加：</span></span><br><span class="line">192.168.1.122 master</span><br><span class="line">192.168.1.123 slave1</span><br><span class="line">192.168.1.124 slave2</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# ssh-keygen# 一直回车即可</span><br><span class="line">[root@localhost ~]# ssh-copy-id master# yes 然后密码</span><br><span class="line">[root@localhost ~]# ssh-copy-id slave1</span><br><span class="line">[root@localhost ~]# ssh-copy-id slave2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">改主机名</span></span><br><span class="line">[root@localhost software]# hostnamectl set-hostname master# 以此类推第二台slave1第三台slave2</span><br></pre></td></tr></table></figure><p><strong>1．子任务一：基础环境准备</strong> </p><p>master、slave1、slave2三台节点都需要安装JDK</p><p>（1） 将JDK安装包解压到&#x2F;root&#x2F;software目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# tar -zxvf /opt/software/jdk-8u391-linux-x64.tar.gz -C /root/software/</span><br><span class="line">[root@localhost software]# cd /root/software/</span><br><span class="line">[root@localhost software]# mv jdk1.8.0_391/ jdk</span><br></pre></td></tr></table></figure><p>（2） 在“&#x2F;etc&#x2F;profile”文件中配置JDK环境变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# vi /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加</span></span><br><span class="line">export JAVA_HOME=/root/software/jdk</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">[root@localhost software]# source /etc/profile</span><br></pre></td></tr></table></figure><p>JAVA_HOME和PATH的值，并让配置文件立即生效；</p><p>（3） 查看JDK版本，检测JDK是否安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# java -version</span><br><span class="line">java version &quot;1.8.0_391&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_391-b13)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.391-b13, mixed mode)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">记得分发jdk给slave1和slave2</span></span><br><span class="line">[root@master software]# scp -r jdk/ slave1:`pwd`</span><br><span class="line">[root@master software]# scp -r jdk/ slave2:`pwd`</span><br></pre></td></tr></table></figure><p>在master节点操作</p><p>（1） 在master上生成SSH密钥对；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前置工作已做</span><br></pre></td></tr></table></figure><p>（2） 将master上的公钥拷贝到slave1和slave2上；在 master 上通过 SSH 连接 slave1 和 slave2 来验证。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost software]# ssh slave1</span><br><span class="line">Last login: Mon Oct 28 11:43:50 2024 from 192.168.1.166</span><br><span class="line">[root@slave1 ~]# exit;</span><br><span class="line">登出</span><br><span class="line">Connection to slave1 closed.</span><br><span class="line">[root@localhost software]# ssh slave1</span><br><span class="line">Last login: Mon Oct 28 11:58:39 2024 from master</span><br><span class="line">[root@slave1 ~]# exit</span><br><span class="line">登出</span><br><span class="line">Connection to slave1 closed.</span><br><span class="line">[root@localhost software]# ssh slave2</span><br><span class="line">Last login: Mon Oct 28 11:43:52 2024 from 192.168.1.166</span><br><span class="line">[root@slave2 ~]# exit</span><br><span class="line">登出</span><br><span class="line">Connection to slave2 closed.</span><br></pre></td></tr></table></figure><p><strong>2．子任务二：Hadoop 完全分布式安装配置</strong> </p><p>master、slave1、slave2三台节点都需要安装Hadoop</p><p>（1） 在 主 节 点 将 Hadoop 安 装 包 解 压 到&#x2F;root&#x2F;software目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /opt/software/hadoop-3.3.6.tar.gz -C /root/software/</span><br></pre></td></tr></table></figure><p>（2） 依次配置hadoop-env.sh、core-site.xml、hdfs-site.xml、mapred-site.xml、yarn-site.xml和workers配置</p><p>文件；Hadoop集群部署规划如下表；</p><p>表1    Hadoop集群部署规划</p><p><img src="https://pic.imgdb.cn/item/6721a0cdd29ded1a8cdcb200.png"></p><p>（3） 在master节点的Hadoop安装目录下依次创建hadoopDatas&#x2F;tempDatas 、 hadoopDatas&#x2F;namenodeDatas 、hadoopDatas&#x2F;datanodeDatas、hadoopDatas&#x2F;dfs&#x2F;nn&#x2F;edits、hadoopDatas&#x2F;dfs&#x2F;snn&#x2F;name 和hadoopDatas&#x2F;dfs&#x2F;nn&#x2F;snn&#x2F;edits目录；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost hadoop]# mkdir -p hadoopDatas/tempDatas</span><br><span class="line">[root@localhost hadoop]# mkdir hadoopDatas/namenodeDatas </span><br><span class="line">[root@localhost hadoop]# mkdir hadoopDatas/datanodeDatas</span><br><span class="line">[root@localhost hadoop]# mkdir hadoopDatas/dfs/nn/edits</span><br><span class="line">[root@localhost hadoop]# mkdir -p hadoopDatas/dfs/nn/edits</span><br><span class="line">[root@localhost hadoop]# mkdir -p hadoopDatas/dfs/snn/name</span><br><span class="line">[root@localhost hadoop]# mkdir -p hadoopDatas/dfs/nn/snn/edits</span><br></pre></td></tr></table></figure><p>（4） 在master节点上使用scp命令将配置完的Hadoop安装目录直接拷贝至slave1和slave2；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /root/software/hadoop/ slave1:`pwd`</span><br><span class="line">scp -r /root/software/hadoop/ slave2:`pwd`</span><br></pre></td></tr></table></figure><p>（5） 三台节点的“&#x2F;etc&#x2F;profile”文件中配置Hadoop环境变量HADOOP_HOME和PATH的值，并让配置文件立即生效；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# scp /etc/profile slave1:/etc</span><br><span class="line">profile                                                        100% 1985     3.4MB/s   00:00    </span><br><span class="line">[root@master software]# scp /etc/profile slave2:/etc</span><br><span class="line">profile                                                        100% 1985     3.4MB/s   00:00</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave1</span></span><br><span class="line">[root@slave1 ~]# source /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">slave2</span></span><br><span class="line">[root@slave2 ~]# source /etc/profile</span><br></pre></td></tr></table></figure><p>（6） 在主节点格式化集群；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# hadoop namenode -format</span><br></pre></td></tr></table></figure><p>（7） 在主节点依次启动HDFS、YARN集群和历史服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@master /]# start-all.sh</span><br><span class="line">Starting namenodes on [master]</span><br><span class="line">上一次登录：一 10月 28 16:05:13 CST 2024pts/0 上</span><br><span class="line">Starting datanodes</span><br><span class="line">上一次登录：一 10月 28 16:05:25 CST 2024pts/0 上</span><br><span class="line">Starting secondary namenodes [master]</span><br><span class="line">上一次登录：一 10月 28 16:05:27 CST 2024pts/0 上</span><br><span class="line">Starting resourcemanager</span><br><span class="line">上一次登录：一 10月 28 16:05:33 CST 2024pts/0 上</span><br><span class="line">Starting nodemanagers</span><br><span class="line">上一次登录：一 10月 28 16:05:40 CST 2024pts/0 上</span><br><span class="line">上一次登录：一 10月 28 16:05:42 CST 2024pts/0 上</span><br><span class="line">[root@master /]# mapred --daemon start historyserver</span><br><span class="line">[root@master /]# jps</span><br><span class="line">70417 WebAppProxyServer</span><br><span class="line">68435 NameNode</span><br><span class="line">71267 JobHistoryServer</span><br><span class="line">69218 SecondaryNameNode</span><br><span class="line">71385 Jps</span><br><span class="line">69560 ResourceManager</span><br><span class="line">69816 NodeManager</span><br><span class="line">68718 DataNode</span><br></pre></td></tr></table></figure><p><strong>3．子任务三：MySQL 安装配置</strong> </p><p>只在master节点操作</p><p>（1） 将MySQL 5.7.25安装包解压到&#x2F;root&#x2F;software目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# tar -xvf /opt/software/mysql-5.7.44-1.el7.x86_64.rpm-bundle.tar -C /root/software/</span><br><span class="line">mysql-community-client-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-common-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-devel-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-compat-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-embedded-devel-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-libs-compat-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-server-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">mysql-community-test-5.7.44-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>（2） 使 用 rpm -ivh 依 次 安 装 mysql-community-common、mysql-community- libs、mysql-community-libscompat 、 mysql-community-client 和 mysql-communityserver包；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# rpm -ivh mysql-community-common-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">[root@master software]# rpm -ivh mysql-community-libs-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">[root@master software]# rpm -ivh mysql-community-libs-compat-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">[root@master software]# rpm -ivh mysql-community-client-5.7.44-1.el7.x86_64.rpm</span><br><span class="line">[root@master software]# rpm -ivh mysql-community-server-5.7.44-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>（3） 安装好MySQL后，使用mysql用户初始化和启动数据库；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# mysqld --initialize-insecure --user=mysql --datadir=/var/lib/mysql</span><br><span class="line">[root@master software]# systemctl start mysqld</span><br></pre></td></tr></table></figure><p>（4） 使用root用户无密码登录MySQL，然后将root用户的密码修改为123456，修改完成退出MySQL，重新登录验证密码是否修改成功；更改“mysql”数据库里的 user 表里的 host 项，从localhost 改成%即可实现用户远程登录；设置完成刷新配置信息，让其生效。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="variable">@master</span> software]# mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">3</span></span><br><span class="line">Server version: <span class="number">5.7</span><span class="number">.44</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2023</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> exit;</span><br><span class="line">Bye</span><br><span class="line">[root<span class="variable">@master</span> software]# mysql <span class="operator">-</span>uroot <span class="operator">-</span>p</span><br><span class="line">Enter password: </span><br><span class="line">Welcome <span class="keyword">to</span> the MySQL monitor.  Commands <span class="keyword">end</span> <span class="keyword">with</span> ; <span class="keyword">or</span> \g.</span><br><span class="line">Your MySQL connection id <span class="keyword">is</span> <span class="number">4</span></span><br><span class="line">Server version: <span class="number">5.7</span><span class="number">.44</span> MySQL Community Server (GPL)</span><br><span class="line"></span><br><span class="line">Copyright (c) <span class="number">2000</span>, <span class="number">2023</span>, Oracle <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its affiliates.</span><br><span class="line"></span><br><span class="line">Oracle <span class="keyword">is</span> a registered trademark <span class="keyword">of</span> Oracle Corporation <span class="keyword">and</span><span class="operator">/</span><span class="keyword">or</span> its</span><br><span class="line">affiliates. Other names may be trademarks <span class="keyword">of</span> their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> help. Type <span class="string">&#x27;\c&#x27;</span> <span class="keyword">to</span> clear the <span class="keyword">current</span> input statement.</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">user</span>          <span class="operator">|</span> host      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------+</span></span><br><span class="line"><span class="operator">|</span> mysql.session <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> mysql.sys     <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> root          <span class="operator">|</span> localhost <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+-----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> mysql.user <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> mysql.user <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;mysql.sys&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">update</span> mysql.user <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;mysql.session&#x27;</span>;</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"><span class="keyword">Rows</span> matched: <span class="number">1</span>  Changed: <span class="number">1</span>  Warnings: <span class="number">0</span></span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> flush privileges;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><p><strong>4．子任务四：Hive 安装配置</strong> </p><p>只在master节点操作。</p><p>（1） 将Hive 3.1.2的安装包解压到&#x2F;root&#x2F;software目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# tar -zxvf /opt/software/apache-hive-3.1.3-bin.tar.gz -C /root/software/</span><br></pre></td></tr></table></figure><p>（2） 在“&#x2F;etc&#x2F;profile”文件中配置Hive环境变量HIVE_HOME和PATH的值，并让配置文件立即生效；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# cd /root/software/</span><br><span class="line">[root@master software]# mv apache-hive-3.1.3-bin/ hive</span><br><span class="line">[root@master software]# vi /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加</span></span><br><span class="line">export HIVE_HOME=/root/software/hive</span><br><span class="line">export PATH=$PATH:$HIVE_HOME/bin</span><br><span class="line">[root@master software]# source /etc/profile</span><br></pre></td></tr></table></figure><p>（3） 查看Hive版本，检测Hive环境变量是否设置成功；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# hive --version</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hive/lib/log4j-slf4j-impl-2.17.1.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: Found binding in [jar:file:/root/software/hadoop/share/hadoop/common/lib/slf4j-reload4j-1.7.36.jar!/org/slf4j/impl/StaticLoggerBinder.class]</span><br><span class="line">SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.</span><br><span class="line">SLF4J: Actual binding is of type [org.apache.logging.slf4j.Log4jLoggerFactory]</span><br><span class="line">Hive 3.1.3</span><br><span class="line">Git git://MacBook-Pro.fios-router.home/Users/ngangam/commit/hive -r 4df4d75bf1e16fe0af75aad0b4179c34c07fc975</span><br><span class="line">Compiled by ngangam on Sun Apr 3 16:58:16 EDT 2022</span><br><span class="line">From source with checksum 5da234766db5dfbe3e92926c9bbab2af</span><br></pre></td></tr></table></figure><p>（4） 切换到 $HIVE_HOME&#x2F;conf 目录下，将 hiveenv.sh.template文件复制一份并重命名为hive-env.sh；然后，使用vim编辑器进行编辑，在文件中配置HADOOP_HOME、HIVE_CONF_DIR以及HIVE_AUX_JARS_PATH参数的值，将原有值删除并将前面的注释符#去掉；配置完成，保存退出；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# cp hive-env.sh.template hive-env.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置这些值</span></span><br><span class="line">HADOOP_HOME=/root/software/hadoop</span><br><span class="line">export HIVE_CONF_DIR=/root/software/hive</span><br><span class="line">export HIVE_AUX_JARS_PATH=/root/software/hive/lib</span><br></pre></td></tr></table></figure><p>（5） 将 &#x2F;root&#x2F;software 目 录 下 的 MySQL 驱动包mysql-connector-java-5.1.47-bin.jar 拷 贝 到$HIVE_HOME&#x2F;lib目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# cp /opt/software/mysql-connector-java-5.1.34.jar /root/software/hive/lib/</span><br></pre></td></tr></table></figure><p>（6） 在$HIVE_HOME&#x2F;conf目录下创建一个名为hive-site.xml的文件，并使用vim编辑器进行编辑；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# vi hive-site.xml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后进行配置</span></span><br></pre></td></tr></table></figure><p>配置如下内容：</p><p><img src="https://pic.imgdb.cn/item/6721a102d29ded1a8cdd10d5.png"></p><p>（7） 使用schematool命令，通过指定元数据库类型为“mysql”，来初始化源数据库的元数据；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# schematool -initSchema -dbType mysql</span><br></pre></td></tr></table></figure><p>（8） 使用CLI启动Hive，进入Hive客户端；在Hive默认数据库下创建一个名为student的管理表；</p><p><img src="https://pic.imgdb.cn/item/6721a127d29ded1a8cdd5fdd.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# hive</span><br><span class="line">hive&gt; create table student(</span><br><span class="line">    &gt; id int,</span><br><span class="line">    &gt; name string);</span><br><span class="line">OK</span><br><span class="line">Time taken: 1.73 seconds</span><br></pre></td></tr></table></figure><p>（9） 通过insert语句往student表中插入一条测试数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; insert into table student values(1, &#x27;hkj&#x27;);</span><br></pre></td></tr></table></figure><p><strong>5．子任务五：Flume 安装配置</strong> </p><p>只在 master 节点操作。</p><p>（1） 将 Flume 1.11.0 的安装包解压到&#x2F;root&#x2F;software目录下；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# tar -zxvf /opt/software/apache-flume-1.11.0-bin.tar.gz -C /root/software/</span><br></pre></td></tr></table></figure><p>（2） 在“&#x2F;etc&#x2F;profile”文件中配置Flume环境变量FLUME_HOME和PATH的值，并让配置文件立即生效；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master software]# cd /root/software/</span><br><span class="line">[root@master software]# mv apache-flume-1.11.0-bin/ flume</span><br><span class="line">[root@master software]# vi /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">追加</span></span><br><span class="line">export FLUME_HOME=/root/software/flume</span><br><span class="line">export PATH=$PATH:$FLUME_HOME/bin</span><br><span class="line">[root@master software]# source /etc/profile</span><br></pre></td></tr></table></figure><p>（3） 使 用 cd 命 令 进 入 &#x2F;root&#x2F;software&#x2F;apache&#x2F;flume-1.11.0-bin&#x2F;conf 目 录 下 ， 使 用 cp 命令将 flumeenv.sh.template文件复制一份，并重命名为flume-env.sh；使 用 vim 命 令 打 开 “flume-env.sh” 配 置 文 件 ， 找 到JAVA_HOME参数位置，将前面的“#”去掉，将值修改为本机JDK的实际位置；修改完成，保存退出；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# cd /root/software/flume/conf/</span><br><span class="line">[root@master conf]# cp flume-env.sh.template flume-env.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将java_home配置项的<span class="comment">#去掉然后更换地址</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例：<span class="built_in">export</span> JAVA_HOME=/root/software/jdk</span></span><br></pre></td></tr></table></figure><p>（4） 查看Flume版本，检测Flume是否安装成功。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# flume-ng version</span><br><span class="line">Flume 1.11.0</span><br><span class="line">Source code repository: https://git.apache.org/repos/asf/flume.git</span><br><span class="line">Revision: 1a15927e594fd0d05a59d804b90a9c31ec93f5e1</span><br><span class="line">Compiled by rgoers on Sun Oct 16 14:44:15 MST 2022</span><br><span class="line">From source with checksum bbbca682177262aac3a89defde369a37</span><br></pre></td></tr></table></figure><p><strong>（二）任务二：数据库配置维护</strong> </p><p><strong>1．子任务一：数据库配置</strong> </p><p>在 Hive 中创建一个名为 comm 的数据库，如果数据库已经存在，则不进行创建。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]# hive</span><br><span class="line">hive&gt; create database if not exist comm;</span><br><span class="line">FAILED: ParseException line 1:23 missing KW_EXISTS at &#x27;exist&#x27; near &#x27;&lt;EOF&gt;&#x27;</span><br><span class="line">line 1:29 extraneous input &#x27;comm&#x27; expecting EOF near &#x27;&lt;EOF&gt;&#x27;</span><br><span class="line">hive&gt; create database if not exists comm;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.297 seconds</span><br></pre></td></tr></table></figure><p><strong>2．子任务二：创建相关表</strong> </p><p>（1） 在 comm 数 据 库 下 创 建 一 个 名 为ods_behavior_log的外部表，如果表已存在，则先删除；分区字段为dt，即根据日期进行分区；同时，使用location关键 字 将 表 的 存 储 路 径 设 置 为 HDFS 的&#x2F;behavior&#x2F;ods&#x2F;ods_behavior_log目录；字段类型如下表所示；</p><p><img src="https://pic.imgdb.cn/item/6721a147d29ded1a8cddbd2e.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; use comm;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.042 seconds</span><br><span class="line">hive&gt; CREATE TABLE IF NOT EXISTS ods_behavior_log (</span><br><span class="line">    &gt;   line STRING</span><br><span class="line">    &gt; )</span><br><span class="line">    &gt; PARTITIONED BY (dt STRING)</span><br><span class="line">    &gt; ROW FORMAT DELIMITED</span><br><span class="line">    &gt; FIELDS TERMINATED BY &#x27;\t&#x27;</span><br><span class="line">    &gt; STORED AS TEXTFILE;</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.244 seconds</span><br></pre></td></tr></table></figure><p>（2） 使 用 load data 子 句 将 本 地&#x2F;root&#x2F;eduhq&#x2F;data&#x2F;app_log&#x2F;behavior目录下的每个数据文件依次加载到外部表ods_behavior_log的对应分区中，按照日志文件对应日期定义静态分区（例如：dt&#x3D;’2023-01-01’）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/excel_log/behavior2023-01-01.xlsx&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-01&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 1.831 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/excel_log/behavior2023-01-02.xlsx&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-02&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.628 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/excel_log/behavior2023-01-03.xlsx&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-03&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.491 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/excel_log/behavior2023-01-04.xlsx&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-04&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.506 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/excel_log/behavior2023-01-05.xlsx&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-05&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.465 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/excel_log/behavior2023-01-06.xlsx&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-06&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.44 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/excel_log/behavior2023-01-07.xlsx&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-07&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.423 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/txt_log/behavior2023-01-01.log&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-01&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.432 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/txt_log/behavior2023-01-02.log&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-02&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.397 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/txt_log/behavior2023-01-03.log&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-03&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.425 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/txt_log/behavior2023-01-04.log&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-04&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.43 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/txt_log/behavior2023-01-05.log&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-05&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.395 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/txt_log/behavior2023-01-06.log&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-06&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.422 seconds</span><br><span class="line">hive&gt; LOAD DATA LOCAL INPATH &#x27;/root/eduhq/data/app_log/behavior/txt_log/behavior2023-01-07.log&#x27; INTO TABLE ods_behavior_log PARTITION (dt=&#x27;2023-01-07&#x27;);</span><br><span class="line">Loading data to table comm.ods_behavior_log partition (dt=2023-01-01)</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.773 seconds</span><br></pre></td></tr></table></figure><p>（3） 查看ods_behavior_log表的所有现有分区、前3行数据，并统计外部表ods_behavior_log数据总行数；</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"># 查看所有现有分区</span><br><span class="line">hive&gt; SHOW PARTITIONS ods_behavior_log;</span><br><span class="line">OK</span><br><span class="line">dt=2023-01-01</span><br><span class="line">dt=2023-01-02</span><br><span class="line">dt=2023-01-03</span><br><span class="line">dt=2023-01-04</span><br><span class="line">dt=2023-01-05</span><br><span class="line">dt=2023-01-06</span><br><span class="line">dt=2023-01-07</span><br><span class="line">Time taken: 0.089 seconds, Fetched: 7 row(s)</span><br><span class="line"></span><br><span class="line"># 前三行数据</span><br><span class="line">hive&gt; SELECT * FROM ods_behavior_log LIMIT 3;</span><br><span class="line">OK</span><br><span class="line">&#123;&quot;client_ip&quot;: &quot;222.86.237.202&quot;, &quot;device_type&quot;: &quot;pc&quot;, &quot;time&quot;: 1672580908000, &quot;type&quot;: &quot;WIFI&quot;, &quot;device&quot;: &quot;357c5dd65e834b8bafac861bdae5d76d&quot;, &quot;url&quot;: &quot;http://wan.baidu.com/home?idfrom=4087&quot;&#125;        2023-01-01</span><br><span class="line">&#123;&quot;client_ip&quot;: &quot;210.42.113.5&quot;, &quot;device_type&quot;: &quot;pc&quot;, &quot;time&quot;: 1672539082000, &quot;type&quot;: &quot;WIFI&quot;, &quot;device&quot;: &quot;6cab446d0c664de4b09c76bae90fc1bf&quot;, &quot;url&quot;: &quot;http://go.hao123.com/sites&quot;&#125;     2023-01-01</span><br><span class="line">&#123;&quot;client_ip&quot;: &quot;222.34.42.67&quot;, &quot;device_type&quot;: &quot;mobile&quot;, &quot;time&quot;: 1672524854000, &quot;type&quot;: &quot;5G&quot;, &quot;device&quot;: &quot;36b4213510e74c7e8455b61fb481b576&quot;, &quot;url&quot;: &quot;https://4366yy.381pk.com/1251/&quot;&#125;       2023-01-01</span><br><span class="line">Time taken: 1.805 seconds, Fetched: 3 row(s)</span><br><span class="line"></span><br><span class="line"># 统计数据总行数</span><br><span class="line">hive&gt; SELECT COUNT(*) FROM ods_behavior_log;</span><br><span class="line">Query ID = root_20241028190258_2de0fddd-343e-4256-b248-f252f3400a9b</span><br><span class="line">Total jobs = 1</span><br><span class="line">Launching Job 1 out of 1</span><br><span class="line">Number of reduce tasks determined at compile time: 1</span><br><span class="line">In order to change the average load for a reducer (in bytes):</span><br><span class="line">  set hive.exec.reducers.bytes.per.reducer=&lt;number&gt;</span><br><span class="line">In order to limit the maximum number of reducers:</span><br><span class="line">  set hive.exec.reducers.max=&lt;number&gt;</span><br><span class="line">In order to set a constant number of reducers:</span><br><span class="line">  set mapreduce.job.reduces=&lt;number&gt;</span><br><span class="line">Starting Job = job_1730102747884_0003, Tracking URL = http://master:8089/proxy/application_1730102747884_0003/</span><br><span class="line">Kill Command = /root/software/hadoop/bin/mapred job  -kill job_1730102747884_0003</span><br><span class="line">Hadoop job information for Stage-1: number of mappers: 1; number of reducers: 1</span><br><span class="line">2024-10-28 19:03:31,071 Stage-1 map = 0%,  reduce = 0%</span><br><span class="line">2024-10-28 19:03:42,782 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 2.55 sec</span><br><span class="line">2024-10-28 19:04:43,115 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 2.55 sec</span><br><span class="line">2024-10-28 19:05:43,251 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 2.55 sec</span><br><span class="line">2024-10-28 19:06:44,246 Stage-1 map = 100%,  reduce = 0%, Cumulative CPU 2.55 sec</span><br><span class="line">2024-10-28 19:06:53,529 Stage-1 map = 100%,  reduce = 100%, Cumulative CPU 4.32 sec</span><br><span class="line">MapReduce Total cumulative CPU time: 4 seconds 320 msec</span><br><span class="line">Ended Job = job_1730102747884_0003</span><br><span class="line">MapReduce Jobs Launched: </span><br><span class="line">Stage-Stage-1: Map: 1  Reduce: 1   Cumulative CPU: 4.32 sec   HDFS Read: 37824491 HDFS Write: 106 SUCCESS</span><br><span class="line">Total MapReduce CPU Time Spent: 4 seconds 320 msec</span><br><span class="line">OK</span><br><span class="line">198413</span><br><span class="line">Time taken: 235.981 seconds, Fetched: 1 row(s)</span><br></pre></td></tr></table></figure><p>（4） 在 comm 数 据 库 下 创 建 一 个 名 为dwd_behavior_log的外部表，如果表已存在，则先删除；分区字段为dt，即根据日期进行分区；另外，要求指定表的存储路径为HDFS的&#x2F;behavior&#x2F;dwd&#x2F;dwd_behavior_log目录，存储文件类型为“orc”，文件的压缩类型为“snappy”；字段类型如下表所示；</p><p><img src="https://pic.imgdb.cn/item/6721a16ad29ded1a8cde1313.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hive&gt; CREATE EXTERNAL TABLE IF NOT EXISTS comm.dwd_behavior_log (</span><br><span class="line">    &gt;   client_ip STRING,</span><br><span class="line">    &gt;   device_type STRING,</span><br><span class="line">    &gt;   type STRING,</span><br><span class="line">    &gt;   device STRING,</span><br><span class="line">    &gt;   url STRING,</span><br><span class="line">    &gt;   province STRING,</span><br><span class="line">    &gt;   city STRING,</span><br><span class="line">    &gt;   ts BIGINT</span><br><span class="line">    &gt; )</span><br><span class="line">    &gt; PARTITIONED BY (dt STRING)</span><br><span class="line">    &gt; STORED AS ORC</span><br><span class="line">    &gt; LOCATION &#x27;/behavior/dwd/dwd_behavior_log&#x27;</span><br><span class="line">    &gt; TBLPROPERTIES (&quot;orc.compress&quot;=&quot;SNAPPY&quot;);</span><br><span class="line">OK</span><br><span class="line">Time taken: 0.091 seconds</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 国赛赛题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-dockerfile</title>
      <link href="/posts/d3ce.html"/>
      <url>/posts/d3ce.html</url>
      
        <content type="html"><![CDATA[<p>404</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose</title>
      <link href="/posts/713b.html"/>
      <url>/posts/713b.html</url>
      
        <content type="html"><![CDATA[<ul><li>首先需要compose,yaml文件</li><li>上线：docker compose up -d</li><li>下线：docker compse down </li><li>启动：docker compose start x1 x2 x3</li><li>停止：docker compose stop x1 x3</li><li>扩容：docker compose scale x2&#x3D;3</li></ul><h4 id="compose-yaml例子："><a href="#compose-yaml例子：" class="headerlink" title="compose.yaml例子："></a>compose.yaml例子：</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">name: myblog</span><br><span class="line">services:</span><br><span class="line">  mysql:</span><br><span class="line">    container_name: mysql</span><br><span class="line">    image: mysql:<span class="number">8.0</span></span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    environment:</span><br><span class="line">      MYSQL_ROOT_PASSWORD: <span class="string">&quot;123456&quot;</span></span><br><span class="line">      MYSQL_DATABASE: wordpress</span><br><span class="line">    volumes:</span><br><span class="line">      - mysql-data:/var/lib/mysql</span><br><span class="line">      - ./myconf:/etc/mysql/conf.d </span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - blog</span><br><span class="line"></span><br><span class="line">  wordpress:</span><br><span class="line">    image: wordpress</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">&quot;8080:80&quot;</span></span><br><span class="line">    environment: </span><br><span class="line">      WORDPRESS_DB_HOST: mysql</span><br><span class="line">      WORDPRESS_DB_USER: root</span><br><span class="line">      WORDPRESS_DB_PASSWORD: <span class="string">&quot;123456&quot;</span> </span><br><span class="line">      WORDPRESS_DB_NAME: wordpress </span><br><span class="line">    volumes:</span><br><span class="line">      - wordpress:/var/www/html</span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - blog</span><br><span class="line"></span><br><span class="line">volumes:</span><br><span class="line">  mysql-data:</span><br><span class="line">  wordpress:</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  blog:</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker安装</title>
      <link href="/posts/1fef.html"/>
      <url>/posts/1fef.html</url>
      
        <content type="html"><![CDATA[<h3 id="先移除旧版的docker如果没有就跳过"><a href="#先移除旧版的docker如果没有就跳过" class="headerlink" title="先移除旧版的docker如果没有就跳过"></a>先移除旧版的docker如果没有就跳过</h3><ul><li>移除旧版本docker \</li><li>sudo yum remove docker \</li><li>docker-client \</li><li>docker-client-latest \</li><li>docker-common \</li><li>docker-latest \</li><li>docker-latest-logrotate \</li><li>docker-logrotate \</li><li>docker-engine</li></ul><h3 id="配置docker-yum源"><a href="#配置docker-yum源" class="headerlink" title="配置docker yum源"></a>配置docker yum源</h3><ul><li>sudo yum install -y yum-utils</li><li>sudo yum-config-manager </li><li>–add-repo </li><li><a href="http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</a></li><li>如果已经配置好yum为阿里云的就不用了</li></ul><h2 id="安装-最新-docker"><a href="#安装-最新-docker" class="headerlink" title="安装 最新 docker"></a>安装 最新 docker</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin</span><br></pre></td></tr></table></figure><h2 id="启动-amp-开机启动docker；-enable-start-二合一"><a href="#启动-amp-开机启动docker；-enable-start-二合一" class="headerlink" title="启动&amp; 开机启动docker； enable + start 二合一"></a>启动&amp; 开机启动docker； enable + start 二合一</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker --now</span><br></pre></td></tr></table></figure><h3 id="配置加速"><a href="#配置加速" class="headerlink" title="配置加速"></a>配置加速</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors那地址</span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://82m9ar63.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"></span><br><span class="line">这个加速不太行使用另外一个</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker保存镜像</title>
      <link href="/posts/287f.html"/>
      <url>/posts/287f.html</url>
      
        <content type="html"><![CDATA[<h3 id="提交：docker-commit"><a href="#提交：docker-commit" class="headerlink" title="提交：docker commit"></a>提交：docker commit</h3><ul><li>docker commit [option] 名字就是用着的那个镜像的名字 新建镜像的名字:版本号</li><li>docker commit -m “update index.html” mynginx mynginx:1.0</li><li>-m 版本信息之类的</li></ul><h3 id="保存-docker-save"><a href="#保存-docker-save" class="headerlink" title="保存: docker save"></a>保存: docker save</h3><ul><li>docker save -o mynginx.tar mynginx:1.0</li><li>-o 保存出来就是本地</li></ul><h3 id="加载：docker-load"><a href="#加载：docker-load" class="headerlink" title="加载：docker load"></a>加载：docker load</h3><p>docker load -i mynginx.tar</p><p>-i就是读取本地的镜像</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker分享社区</title>
      <link href="/posts/e3ea.html"/>
      <url>/posts/e3ea.html</url>
      
        <content type="html"><![CDATA[<h3 id="登录：docker-login"><a href="#登录：docker-login" class="headerlink" title="登录：docker login"></a>登录：docker login</h3><h3 id="命令-docker-tag"><a href="#命令-docker-tag" class="headerlink" title="命令:docker tag"></a>命令:docker tag</h3><ul><li>docker tag 原来的镜像名:版本号 新的镜像名:版本号</li><li>还可以docker tag mynginx:v1.0 lhx&#x2F;mynginx:v1.0 改名都是用户名&#x2F;镜像这样子的</li></ul><p>推荐在制作一个最新版本的镜像， 就是latest    docker tag mynginx:v1.0 lhx&#x2F;mynginx:latest然后在推送上去</p><h4 id="推送：docker-push-镜像名字"><a href="#推送：docker-push-镜像名字" class="headerlink" title="推送：docker push + 镜像名字"></a>推送：docker push + 镜像名字</h4><p><img src="/posts/e3ea.htm/Users\LHX\AppData\Roaming\Typora\typora-user-images\image-20241025115810209.png" alt="image-20241025115810209"></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker国内镜像源</title>
      <link href="/posts/ec39.html"/>
      <url>/posts/ec39.html</url>
      
        <content type="html"><![CDATA[<h3 id="进入配置文件registry-mirror：需要重启docker服务"><a href="#进入配置文件registry-mirror：需要重启docker服务" class="headerlink" title="进入配置文件registry mirror：需要重启docker服务"></a>进入配置文件registry mirror：需要重启docker服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br><span class="line">tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;: [</span><br><span class="line">&quot;https://do.nark.eu.org&quot;,</span><br><span class="line">&quot;https://dc.j8.work&quot;,</span><br><span class="line">&quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">&quot;https://dockerproxy.com&quot;,</span><br><span class="line">&quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">&quot;https://docker.nju.edu.cn&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker存储</title>
      <link href="/posts/ade7.html"/>
      <url>/posts/ade7.html</url>
      
        <content type="html"><![CDATA[<ol><li>目录挂载：-v 外目录:内目录</li><li>例子：docker run -d -p 80:80 -v &#x2F;app&#x2F;nghtml:&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html –name app01 nginx</li><li>卷映射 -v 卷名:内目录</li><li>例子：docker run -d -p 80:80 -v ngconf:&#x2F;etc&#x2F;nginx</li><li>卷的统一位置在：&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;</li><li>列出所有的卷docker volume ls</li><li>新建卷docker volume create hkjcpdd</li><li>查看卷的详情docker volume inspect ngconf</li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker架构</title>
      <link href="/posts/af13.html"/>
      <url>/posts/af13.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载镜像的话就是，docker-pull-镜像-镜像-x3D-标签-版本-latest为最新"><a href="#下载镜像的话就是，docker-pull-镜像-镜像-x3D-标签-版本-latest为最新" class="headerlink" title="下载镜像的话就是，docker pull + 镜像  镜像&#x3D;标签+版本  latest为最新"></a>下载镜像的话就是，docker pull + 镜像  镜像&#x3D;标签+版本  latest为最新</h3><ul><li>下载别的版本的话就是去dockerhub上看</li><li>检索docker search + 名字</li><li>列表：docker images</li><li>删除：docker rmi + 完整标签或者id 如：docker rmi nginx:latest</li></ul><h3 id="运行镜像的话就是，docker-run-options-image-commend-arg…-后面是启动命令但是一般的镜像都有自己的启动命令个所以可不加"><a href="#运行镜像的话就是，docker-run-options-image-commend-arg…-后面是启动命令但是一般的镜像都有自己的启动命令个所以可不加" class="headerlink" title="运行镜像的话就是，docker run [options] image [commend] [arg…] 后面是启动命令但是一般的镜像都有自己的启动命令个所以可不加"></a>运行镜像的话就是，docker run [options] image [commend] [arg…] 后面是启动命令但是一般的镜像都有自己的启动命令个所以可不加</h3><ul><li>后台运行-d</li><li>起个名字 –name</li><li>端口映射 -p 80:80</li></ul><ol><li><p>查看docker ps</p></li><li><p>停止 docker stop</p></li><li><p>启动docker start</p></li><li><p>重启 docker restart </p></li><li><p>状态 docker stats</p></li><li><p>日志 docker logs</p></li><li><p>进入 docker exec</p><p>docker exec -it mynginx &#x2F;bin&#x2F;bash</p><p>-it是交互模式</p><p>后面的路径是让他在控制台上显示</p></li><li><p>删除 docker rm</p></li><li><p>用docker构建自己的软件包，docker build + 镜像</p></li><li><p>发给应用市场让dock保存的话就是，dock push + 镜像</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker网络</title>
      <link href="/posts/5796.html"/>
      <url>/posts/5796.html</url>
      
        <content type="html"><![CDATA[<p>查看容器的细节</p><p>docker inspect app2</p><p>docker network + 功能</p><p><img src="/posts/5796.htm/Users\LHX\AppData\Roaming\Typora\typora-user-images\image-20241025120003627.png" alt="image-20241025120003627"></p><h4 id="环境变量就用-e"><a href="#环境变量就用-e" class="headerlink" title="环境变量就用-e"></a>环境变量就用-e</h4>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker保存镜像</title>
      <link href="/posts/287f.html"/>
      <url>/posts/287f.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yum配置</title>
      <link href="/posts/dfc4.html"/>
      <url>/posts/dfc4.html</url>
      
        <content type="html"><![CDATA[<h2 id="普通配置"><a href="#普通配置" class="headerlink" title="普通配置"></a>普通配置</h2><ul><li><p>关闭防火墙</p></li><li><p>然后关闭selinux</p></li><li><p>查看网卡 nmcli c s</p></li><li><p>刷新网卡 nmcli c u ens33</p></li><li><p>开启ssh远程连接 vi &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p></li><li><p>刷新服务 systemctl restart sshd</p></li><li><p>先暂时挂载mount &#x2F;opt&#x2F;镜像 &#x2F;mnt&#x2F;</p></li><li><p>然后永久挂载echo &#x2F;opt&#x2F;镜像 &#x2F;mnt&#x2F; iso9660 defaults 0 0 &gt;&gt; &#x2F;etc&#x2F;fstab</p></li><li><p>然后进入&#x2F;etc&#x2F;yum.repo</p></li><li><p>全部删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repo</span><br><span class="line">[1]</span><br><span class="line">name=1</span><br><span class="line">baseurl=file:///mnt/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line"></span><br><span class="line">yum repolist all</span><br></pre></td></tr></table></figure></li></ul><h3 id="阿里云源："><a href="#阿里云源：" class="headerlink" title="阿里云源："></a>阿里云源：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">先安装wget    yum install wget -y</span><br><span class="line">然后拿文件</span><br><span class="line">wget -O /etc/yum.repo.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">然后清理缓存还有生成新的缓存</span><br><span class="line">清理 yum clean all</span><br><span class="line">生成 yum makecache</span><br><span class="line">接下来下载epel库</span><br><span class="line">yum install epel-release -y</span><br><span class="line">然后重复一次清理和生成就可以了</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 示例 </tag>
            
            <tag> demo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
